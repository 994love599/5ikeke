{"meta":{"title":"�����ũ","subtitle":"","description":"","author":"yuhang","url":"https://www.5ikeke.xyz","root":"/"},"pages":[{"title":"","date":"2020-02-15T14:48:46.149Z","updated":"2020-02-15T14:48:46.149Z","comments":false,"path":"about/index.html","permalink":"https://www.5ikeke.xyz/about/index.html","excerpt":"","text":"个人简介个人信息姓名：王航性别：男出生年月：1996年7月毕业院校：本科/北京邮电大学世纪学院专业：计算机科学与技术工作年限：2年技术博客：http://5ijava.xyz/Github：https://github.com/994love599期望职位：Java中级程序员，web前后端期望薪资：税前月薪15k~20k期望城市：北京联系方式手机：18518163797（非诚勿扰）Email：804255523@QQ.comWechat：wh804255523工作经历亿阳信通股份有限公司北京分公司 （ 2018年7月 ~ 至今 ）所在部门：新产品预研部 应用组电信IDC/ISP信息安全管理系统电信“IDC/ISP 信息安全管理系统”日常维护、Bug修改电信“IDC/ISP 信息安全管理系统”子功能“日志溯源”改造开发电信“IDC/ISP 信息安全管理系统”子功能“策略可视化”的设计开发电信“IDC/ISP 信息安全管理系统”子功能“IP+域名白名单管理”开发电信“IDC/ISP 信息安全管理系统”web部分的IPV6 改造。电信“IDC/ISP 信息安全管理系统”子功能的权限分离改造。电信“IDC/ISP 信息安全管理系统”与电信 4A 系统的单点登录接口开发。电信“IDC/ISP 信息安全管理系统”自动化运维开发。电信“IDC/ISP 信息安全管理系统”的“IP 溯源”开发。电信“IDC/ISP 信息安全管理系统”的“基础数据深层次管控”功能开发。电信云资源系统日常维护、bug修改系统功能改造开发（老项目，接管改造）职业技能java基础扎实，有SpringBoot开发经验熟练使用 js、html、css、Ajax、vue.js、elementui等前端技术具备数据库设计开发能力：MySQL、Oracle、Redis、MongoDb熟练使用 Svn、Git、Maven、jenkins熟练使用Echarts部分功能，有数据可视化实操经验掌握Linux、nginx常用操作致谢感谢您花时间阅读我的简历，期待能有机会和您共事。"},{"title":"分类","date":"2020-01-13T07:19:39.080Z","updated":"2020-01-13T02:28:46.949Z","comments":false,"path":"categories/index.html","permalink":"https://www.5ikeke.xyz/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-02-15T10:34:01.964Z","updated":"2020-02-15T10:34:01.964Z","comments":true,"path":"links/index.html","permalink":"https://www.5ikeke.xyz/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-02-15T08:49:48.430Z","updated":"2020-01-13T02:28:46.957Z","comments":false,"path":"tags/index.html","permalink":"https://www.5ikeke.xyz/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"SpringBoot简单整合Kafka，实现消息发送与消费","slug":"a_1","date":"2020-02-15T14:42:03.000Z","updated":"2020-02-16T03:55:08.680Z","comments":true,"path":"2020/02/15/a_1/","link":"","permalink":"https://www.5ikeke.xyz/2020/02/15/a_1/","excerpt":"","text":"什么是kafkaKafka是一种发布-订阅模式的消息中间件当然，kafka的具体定义不再赘述，官方文档有详细讲解文档两份献上：官方文档 http://kafka.apache.org/中文文档 http://kafka.apachecn.org/话不多说，回归主题，直接上代码吧1、maven引入kafka依赖12345678910&lt;dependency&gt; &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt; &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt; &lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt; &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt; &lt;version&gt;1.1.0&lt;/version&gt;&lt;/dependency&gt;2、在application.properties中完善kafka基础配置1234567891011121314151617181920#################### kafka配置 ##################### 指定kafka 代理地址，可以多个，以实际环境配置为准，我这里是本地localhost，9092端口spring.kafka.bootstrap-servers&#x3D;127.0.0.1:9092##生产者配置spring.kafka.producer.retries&#x3D;0# 每次批量发送消息的数量spring.kafka.producer.batch-size&#x3D;16384spring.kafka.producer.buffer-memory&#x3D;33554432# 指定消息key和消息体的编解码方式spring.kafka.producer.key-serializer&#x3D;org.apache.kafka.common.serialization.StringSerializerspring.kafka.producer.value-serializer&#x3D;org.apache.kafka.common.serialization.StringSerializer##消费者配置# 指定默认消费者group idspring.kafka.consumer.group-id&#x3D;test-hello-groupspring.kafka.consumer.auto-offset-reset&#x3D;earliestspring.kafka.consumer.enable-auto-commit&#x3D;truespring.kafka.consumer.auto-commit-interval&#x3D;500# 指定消息key和消息体的编解码方式spring.kafka.consumer.key-deserializer&#x3D;org.apache.kafka.common.serialization.StringDeserializerspring.kafka.consumer.value-deserializer&#x3D;org.apache.kafka.common.serialization.StringDeserializer3、接下来开始实现 生产者的消息发送 以及 消费者的订阅我这里使用一个常量类，来配置topic：12345678public class kafkaConstants &#123; public final static String TOPIC_994=\"994\"; public final static String TOPIC_599=\"599\"; public final static String TOPIC_LXX=\"lxx\"; public final static String TOPIC_WYH=\"wyh\"; public final static String TOPIC_TEST1=\"test_1\"; public final static String TOPIC_TEST2=\"test_2\";&#125;生产者发送消息：123456789101112131415@Componentpublic class KfkaProducer &#123; private static Logger logger = LoggerFactory.getLogger(KfkaProducer.class); @Autowired private KafkaTemplate&lt;String, String&gt; kafkaTemplate; /** * @Description 发送消息 * @param topic 主题 * @param msgContent 消息内容 */ public void send(String topic,String msgContent) &#123; logger.info(\"###发送消息：topic=&#123;&#125; message = &#123;&#125;\",topic, msgContent); kafkaTemplate.send(topic, msgContent); &#125;&#125;这里使用KafkaTemplate来进行消息的发送，发送到主题topic，供消费者实时消费消费者消费：12345678910111213141516171819202122232425@Componentpublic class KafkaReceiver &#123; private static Logger logger = LoggerFactory.getLogger(KafkaReceiver.class); //定向消费 @KafkaListener(topics = &#123;\"599\"&#125;) public void listen_1(ConsumerRecord&lt;?, ?&gt; record) &#123; Optional&lt;?&gt; kafkaMessage = Optional.ofNullable(record.value()); if (kafkaMessage.isPresent()) &#123; Object message = kafkaMessage.get(); logger.info(\"----------------- record =&#123;&#125;\",record); logger.info(\"------------------ message =\" + message); &#125; &#125; //动态消费 @KafkaListener(topicPattern = \"test.*\") public void listen_2(ConsumerRecord&lt;?, ?&gt; record) &#123; Optional&lt;?&gt; kafkaMessage = Optional.ofNullable(record.value()); if (kafkaMessage.isPresent()) &#123; Object message = kafkaMessage.get(); logger.info(\"----------------- record =&#123;&#125;\",record); logger.info(\"------------------ message =\" + message); &#125; &#125;&#125;对于消费者而言，可以定向的消费某一topic也可以动态消费某一系列topic上述方法中 listen_1 只消费 topic=“599”的消息listen_2 可消费 topic前缀为“test”的消息好了，写个接口测试下消息生产以及消费吧12345678910111213@RestControllerpublic class kafkaController &#123; @Autowired private KfkaProducer producer; private Gson gson = new GsonBuilder().create(); @RequestMapping(\"/testSendMsg\") @ResponseBody public String testSendMsg()&#123; String msg=\"您好呀，599\" producer.send(kafkaConstants.TOPIC_599,msg); return \"success\"; &#125;&#125;测试下接口：生产者发送消息成功，同时，消费者也消费成功公众号关注走一波，谢谢","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.5ikeke.xyz/categories/SpringBoot/"}],"tags":[{"name":"kafka","slug":"kafka","permalink":"https://www.5ikeke.xyz/tags/kafka/"}]},{"title":"markdonw 在线编辑器推荐","slug":"a_0","date":"2020-01-13T02:43:14.000Z","updated":"2020-02-15T14:55:52.492Z","comments":true,"path":"2020/01/13/a_0/","link":"","permalink":"https://www.5ikeke.xyz/2020/01/13/a_0/","excerpt":"","text":"MdEditor是一个在线编辑Markdown文档的编辑器MdEditor扩展了Markdown的功能（如表格、脚注、内嵌HTML等等），以使让Markdown转换成更多的格式，和更丰富的展示效果，这些功能原初的Markdown尚不具备。Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如Pandoc，Pandao；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。MdEditor源于Pandao的JavaScript开源项目，开源地址Editor.md，并在MIT开源协议的许可范围内进行了优化，以适应广大用户群体的需求。向优秀的markdown开源编辑器原作者Pandao致敬。MdEditor的功能列表演示标题H1标题H2标题H3标题H4标题H5标题H5字符效果和横线等删除线 删除线（开启识别HTML标签时）斜体字 斜体字粗体 粗体粗斜体 粗斜体上标：X2，下标：O2缩写(同HTML的abbr标签)即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启The HTML specification is maintained by the W3C.引用 Blockquotes引用文本 Blockquotes引用的行内混合 Blockquotes引用：如果想要插入空白换行即&lt;br /&gt;标签，在插入处先键入两个以上的空格然后回车即可，普通链接。锚点与链接 Links普通链接普通链接带标题直接链接：https://www.mdeditor.com[锚点链接][anchor-id][anchor-id]: https://www.mdeditor.com/mailto:test.test@gmail.comGFM a-tail link @pandao邮箱地址自动链接 test.test@gmail.com www@vip.qq.com@pandao多语言代码高亮 Codes行内代码 Inline code执行命令：npm install marked缩进风格即缩进四个空格，也做为实现类似 &lt;pre&gt; 预格式化文本 ( Preformatted Text ) 的功能。&lt;?php echo &quot;Hello world!&quot;; ?&gt;预格式化文本：| First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell |JS代码123function test() &#123; console.log(\"Hello world!\");&#125;HTML 代码 HTML codes1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;mate charest=\"utf-8\" /&gt; &lt;meta name=\"keywords\" content=\"Editor.md, Markdown, Editor\" /&gt; &lt;title&gt;Hello world!&lt;/title&gt; &lt;style type=\"text/css\"&gt; body&#123;font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;&#125; ul&#123;list-style: none;&#125; img&#123;border:none;vertical-align: middle;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 class=\"text-xxl\"&gt;Hello world!&lt;/h1&gt; &lt;p class=\"text-green\"&gt;Plain text&lt;/p&gt; &lt;/body&gt;&lt;/html&gt;图片 Images图片加链接 (Image + Link)：Follow your heart.列表 Lists无序列表（减号）Unordered Lists (-)列表一列表二列表三无序列表（星号）Unordered Lists (*)列表一列表二列表三无序列表（加号和嵌套）Unordered Lists (+)列表一列表二列表二-1列表二-2列表二-3列表三列表一列表二列表三有序列表 Ordered Lists (-)第一行第二行第三行GFM task list GFM task list 1 GFM task list 2 GFM task list 3 GFM task list 3-1 GFM task list 3-2 GFM task list 3-3 GFM task list 4 GFM task list 4-1 GFM task list 4-2绘制表格 Tables项目价格数量计算机$16005手机$1212管线$1234First HeaderSecond HeaderContent CellContent CellContent CellContent CellFirst HeaderSecond HeaderContent CellContent CellContent CellContent CellFunction nameDescriptionhelp()Display the help window.destroy()Destroy your computer!Left-AlignedCenter AlignedRight Alignedcol 3 issome wordy text$1600col 2 iscentered$12zebra stripesare neat$1ItemValueComputer$1600Phone$12Pipe$1特殊符号 HTML Entities Codes&copy; &amp; &uml; &trade; &iexcl; &pound;&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot;X&sup2; Y&sup3; &frac34; &frac14; &times; &divide; &raquo;18&ordm;C &quot; &apos;[========]Emoji表情 :smiley:Blockquotes :star:GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x: :smiley: @mentions, :smiley: #refs, links, formatting, and tags supported :editormd-logo:; list syntax required (any unordered or ordered list supported) :editormd-logo-3x:; [ ] :smiley: this is a complete item :smiley:; []this is an incomplete item test link :fa-star: @pandao; [ ]this is an incomplete item :fa-star: :fa-gear:; :smiley: this is an incomplete item test link :fa-star: :fa-gear:; :smiley: this is :fa-star: :fa-gear: an incomplete item test link;反斜杠 Escape*literal asterisks*[========]科学公式 TeX(KaTeX)$$E=mc^2$$行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。$$x &gt; y$$$$(\\sqrt{3x-1}+(1+x)^2)$$$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$多行公式：12345\\displaystyle\\left( \\sum\\_&#123;k&#x3D;1&#125;^n a\\_k b\\_k \\right)^2\\leq\\left( \\sum\\_&#123;k&#x3D;1&#125;^n a\\_k^2 \\right)\\left( \\sum\\_&#123;k&#x3D;1&#125;^n b\\_k^2 \\right)123456789\\displaystyle \\frac&#123;1&#125;&#123; \\Bigl(\\sqrt&#123;\\phi \\sqrt&#123;5&#125;&#125;-\\phi\\Bigr) e^&#123; \\frac25 \\pi&#125;&#125; &#x3D; 1+\\frac&#123;e^&#123;-2\\pi&#125;&#125; &#123;1+\\frac&#123;e^&#123;-4\\pi&#125;&#125; &#123; 1+\\frac&#123;e^&#123;-6\\pi&#125;&#125; &#123;1+\\frac&#123;e^&#123;-8\\pi&#125;&#125; &#123;1+\\cdots&#125; &#125; &#125; &#125;123f(x) &#x3D; \\int_&#123;-\\infty&#125;^\\infty \\hat f(\\xi)\\,e^&#123;2 \\pi i \\xi x&#125; \\,d\\xi分页符 Page breakPrint Test: Ctrl + P[========]绘制流程图 Flowchart12345678st&#x3D;&gt;start: 用户登陆op&#x3D;&gt;operation: 登陆操作cond&#x3D;&gt;condition: 登陆成功 Yes or No?e&#x3D;&gt;end: 进入后台st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op[========]绘制序列图 Sequence Diagram1234Andrew-&gt;China: Says HelloNote right of China: China thinks\\nabout itChina--&gt;Andrew: How are you?Andrew-&gt;&gt;China: I am good thanks!End","categories":[{"name":"markdonw","slug":"markdonw","permalink":"https://www.5ikeke.xyz/categories/markdonw/"}],"tags":[{"name":"markdonw","slug":"markdonw","permalink":"https://www.5ikeke.xyz/tags/markdonw/"}]}]}