<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>�����ũ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.5ijava.xyz/"/>
  <updated>2020-02-16T07:55:17.985Z</updated>
  <id>https://www.5ijava.xyz/</id>
  
  <author>
    <name>yuhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot简单整合Kafka，实现消息发送与消费</title>
    <link href="https://www.5ijava.xyz/2020/02/15/a_1/"/>
    <id>https://www.5ijava.xyz/2020/02/15/a_1/</id>
    <published>2020-02-15T14:42:03.000Z</published>
    <updated>2020-02-16T07:55:17.985Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 21 2020 09:04:06 GMT+0800 (GMT+08:00) --><h2 id="什么是kafka"><a href="#什么是kafka" class="headerlink" title="什么是kafka"></a>什么是kafka</h2><blockquote><p>Kafka是一种发布-订阅模式的消息中间件</p></blockquote><h5 id="当然，kafka的具体定义不再赘述，官方文档有详细讲解"><a href="#当然，kafka的具体定义不再赘述，官方文档有详细讲解" class="headerlink" title="当然，kafka的具体定义不再赘述，官方文档有详细讲解"></a>当然，kafka的具体定义不再赘述，官方文档有详细讲解</h5><h5 id="文档两份献上："><a href="#文档两份献上：" class="headerlink" title="文档两份献上："></a>文档两份献上：</h5><blockquote><p>官方文档 <a href="http://kafka.apache.org/" target="_blank" rel="noopener">http://kafka.apache.org/</a><br>中文文档 <a href="http://kafka.apachecn.org/" target="_blank" rel="noopener">http://kafka.apachecn.org/</a></p></blockquote><hr><h2 id="话不多说，回归主题，直接上代码吧"><a href="#话不多说，回归主题，直接上代码吧" class="headerlink" title="话不多说，回归主题，直接上代码吧"></a>话不多说，回归主题，直接上代码吧</h2><h4 id="1、maven引入kafka依赖"><a href="#1、maven引入kafka依赖" class="headerlink" title="1、maven引入kafka依赖"></a>1、maven引入kafka依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="2、在application-properties中完善kafka基础配置"><a href="#2、在application-properties中完善kafka基础配置" class="headerlink" title="2、在application.properties中完善kafka基础配置"></a>2、在application.properties中完善kafka基础配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#################### kafka配置 ####################</span><br><span class="line"># 指定kafka 代理地址，可以多个，以实际环境配置为准，我这里是本地localhost，9092端口</span><br><span class="line">spring.kafka.bootstrap-servers&#x3D;127.0.0.1:9092</span><br><span class="line">##生产者配置</span><br><span class="line">spring.kafka.producer.retries&#x3D;0</span><br><span class="line"># 每次批量发送消息的数量</span><br><span class="line">spring.kafka.producer.batch-size&#x3D;16384</span><br><span class="line">spring.kafka.producer.buffer-memory&#x3D;33554432</span><br><span class="line"># 指定消息key和消息体的编解码方式</span><br><span class="line">spring.kafka.producer.key-serializer&#x3D;org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">spring.kafka.producer.value-serializer&#x3D;org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">##消费者配置</span><br><span class="line"># 指定默认消费者group id</span><br><span class="line">spring.kafka.consumer.group-id&#x3D;test-hello-group</span><br><span class="line">spring.kafka.consumer.auto-offset-reset&#x3D;earliest</span><br><span class="line">spring.kafka.consumer.enable-auto-commit&#x3D;true</span><br><span class="line">spring.kafka.consumer.auto-commit-interval&#x3D;500</span><br><span class="line"># 指定消息key和消息体的编解码方式</span><br><span class="line">spring.kafka.consumer.key-deserializer&#x3D;org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">spring.kafka.consumer.value-deserializer&#x3D;org.apache.kafka.common.serialization.StringDeserializer</span><br></pre></td></tr></table></figure><hr><h4 id="3、接下来开始实现-生产者的消息发送-以及-消费者的订阅"><a href="#3、接下来开始实现-生产者的消息发送-以及-消费者的订阅" class="headerlink" title="3、接下来开始实现 生产者的消息发送 以及 消费者的订阅"></a>3、接下来开始实现 生产者的消息发送 以及 消费者的订阅</h4><h5 id="我这里使用一个常量类，来配置topic："><a href="#我这里使用一个常量类，来配置topic：" class="headerlink" title="我这里使用一个常量类，来配置topic："></a>我这里使用一个常量类，来配置topic：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">kafkaConstants</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String TOPIC_994=<span class="string">"994"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String TOPIC_599=<span class="string">"599"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String TOPIC_LXX=<span class="string">"lxx"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String TOPIC_WYH=<span class="string">"wyh"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String TOPIC_TEST1=<span class="string">"test_1"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String TOPIC_TEST2=<span class="string">"test_2"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="生产者发送消息："><a href="#生产者发送消息：" class="headerlink" title="生产者发送消息："></a>生产者发送消息：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KfkaProducer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(KfkaProducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic 主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgContent 消息内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String topic,String msgContent)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"###发送消息：topic=&#123;&#125;  message = &#123;&#125;"</span>,topic, msgContent);</span><br><span class="line">        kafkaTemplate.send(topic, msgContent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里使用KafkaTemplate来进行消息的发送，发送到主题topic，供消费者实时消费</p></blockquote><h5 id="消费者消费："><a href="#消费者消费：" class="headerlink" title="消费者消费："></a>消费者消费：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(KafkaReceiver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//定向消费</span></span><br><span class="line">    <span class="meta">@KafkaListener</span>(topics = &#123;<span class="string">"599"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen_1</span><span class="params">(ConsumerRecord&lt;?, ?&gt; record)</span> </span>&#123;</span><br><span class="line">        Optional&lt;?&gt; kafkaMessage = Optional.ofNullable(record.value());</span><br><span class="line">        <span class="keyword">if</span> (kafkaMessage.isPresent()) &#123;</span><br><span class="line">            Object message = kafkaMessage.get();</span><br><span class="line">            logger.info(<span class="string">"----------------- record =&#123;&#125;"</span>,record);</span><br><span class="line">            logger.info(<span class="string">"------------------ message ="</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//动态消费</span></span><br><span class="line">    <span class="meta">@KafkaListener</span>(topicPattern = <span class="string">"test.*"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen_2</span><span class="params">(ConsumerRecord&lt;?, ?&gt; record)</span> </span>&#123;</span><br><span class="line">        Optional&lt;?&gt; kafkaMessage = Optional.ofNullable(record.value());</span><br><span class="line">        <span class="keyword">if</span> (kafkaMessage.isPresent()) &#123;</span><br><span class="line">            Object message = kafkaMessage.get();</span><br><span class="line">            logger.info(<span class="string">"----------------- record =&#123;&#125;"</span>,record);</span><br><span class="line">            logger.info(<span class="string">"------------------ message ="</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于消费者而言，可以定向的消费某一topic也可以动态消费某一系列topic<br>上述方法中 listen_1 只消费 topic=“599”的消息<br>listen_2 可消费 topic前缀为“test”的消息</p></blockquote><hr><p>好了，写个接口测试下消息生产以及消费吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">kafkaController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KfkaProducer producer;</span><br><span class="line">    <span class="keyword">private</span> Gson gson = <span class="keyword">new</span> GsonBuilder().create();</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testSendMsg"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSendMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String msg=<span class="string">"您好呀，599"</span></span><br><span class="line">        producer.send(kafkaConstants.TOPIC_599,msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试下接口："><a href="#测试下接口：" class="headerlink" title="测试下接口："></a>测试下接口：</h3><p><img src="/2020/02/15/a_1/r1.jpg" alt></p><blockquote><p>生产者发送消息成功，同时，消费者也消费成功</p></blockquote><hr><h3 id="公众号关注走一波，谢谢"><a href="#公众号关注走一波，谢谢" class="headerlink" title="公众号关注走一波，谢谢"></a><center><font face="黑体" color="red">公众号关注走一波，谢谢</font></center></h3><div align="center"><img src="/2020/02/15/a_1/code.jpg" width></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Apr 21 2020 09:04:06 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;什么是kafka&quot;&gt;&lt;a href=&quot;#什么是kafka&quot; class=&quot;headerlink&quot; title=&quot;什么是kafka&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://www.5ijava.xyz/categories/SpringBoot/"/>
    
    
      <category term="kafka" scheme="https://www.5ijava.xyz/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>推荐一名正在寻找坑位的设计师</title>
    <link href="https://www.5ijava.xyz/2020/02/14/a_2/"/>
    <id>https://www.5ijava.xyz/2020/02/14/a_2/</id>
    <published>2020-02-14T13:13:14.000Z</published>
    <updated>2020-02-16T07:42:53.803Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 21 2020 09:04:06 GMT+0800 (GMT+08:00) --><blockquote><p><img src="/2020/02/14/a_2/a1.jpg" alt="avatar"></p><p><img src="/2020/02/14/a_2/a2.jpg" alt="avatar"></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Apr 21 2020 09:04:06 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;&lt;img src=&quot;/2020/02/14/a_2/a1.jpg&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img s
      
    
    </summary>
    
    
      <category term="简历" scheme="https://www.5ijava.xyz/categories/%E7%AE%80%E5%8E%86/"/>
    
    
      <category term="设计师" scheme="https://www.5ijava.xyz/tags/%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
  </entry>
  
  <entry>
    <title>新冠肺炎疫情实时数据接口分享</title>
    <link href="https://www.5ijava.xyz/2020/02/14/a_3/"/>
    <id>https://www.5ijava.xyz/2020/02/14/a_3/</id>
    <published>2020-02-14T13:13:14.000Z</published>
    <updated>2020-02-16T08:41:23.534Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 21 2020 09:04:06 GMT+0800 (GMT+08:00) --><blockquote><p>请求方式：GET<br>接口地址：<a href="https://tianqiapi.com/api" target="_blank" rel="noopener">https://tianqiapi.com/api</a><br>接口参数：appid、appsecret (前往官网注册一个开发者的免费账号即可)<br>官网地址：<a href="http://tianqiapi.com/index/doc" target="_blank" rel="noopener">http://tianqiapi.com/index/doc</a></p></blockquote><h2 id="这里以ajax请求为例，测试下"><a href="#这里以ajax请求为例，测试下" class="headerlink" title="这里以ajax请求为例，测试下"></a>这里以ajax请求为例，测试下</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url: <span class="string">"https://www.tianqiapi.com/api?version=epidemic&amp;appid=23035354&amp;appsecret=8YvlPNrz"</span>,</span><br><span class="line">        contentType: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">&#125;,</span><br><span class="line">success: function(r)&#123;</span><br><span class="line">     alert(JSON.stringify(r));</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>数据返回如图：</p><blockquote><p><img src="/2020/02/14/a_3/a1.jpg" alt></p></blockquote></li><li><p>具体返回json内容详见官网文档 <a href="http://tianqiapi.com/index/doc" target="_blank" rel="noopener">http://tianqiapi.com/index/doc</a></p></li></ul><blockquote><p>那么，怎么利用返回的json数据进行可视化展示呢，这里本人推荐 Echarts<br>Echarts官网文档献上： <a href="https://www.echartsjs.com/zh/index.html" target="_blank" rel="noopener">https://www.echartsjs.com/zh/index.html</a></p></blockquote><h3 id="当然本人最近也写了一个简单的可视化站点，大家可以去访问下"><a href="#当然本人最近也写了一个简单的可视化站点，大家可以去访问下" class="headerlink" title="当然本人最近也写了一个简单的可视化站点，大家可以去访问下"></a>当然本人最近也写了一个简单的可视化站点，大家可以去访问下</h3><blockquote><p>本人的疫情可视化站点：<a href="https://www.5ikeke.xyz/" target="_blank">https://www.5ikeke.xyz/</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Apr 21 2020 09:04:06 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;请求方式：GET&lt;br&gt;接口地址：&lt;a href=&quot;https://tianqiapi.com/api&quot; target=
      
    
    </summary>
    
    
      <category term="新冠肺炎" scheme="https://www.5ijava.xyz/categories/%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8E/"/>
    
    
      <category term="接口分享" scheme="https://www.5ijava.xyz/tags/%E6%8E%A5%E5%8F%A3%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
</feed>
